[
["planets.html", "4 The Planets", " 4 The Planets 4.0.1 The Data # load and format data planets &lt;- data.frame(t(list.cbind(sw_planets))) %&gt;% # convert star wars planets dataset to a tibble as.tibble() %&gt;% # retain only columns between name and population (inclusive) select(name:population) %&gt;% # mutate columns that are lists to non-lists mutate_if(is.list, ~(unlist(.))) %&gt;% # mutate all columns, replacing &quot;unknown&quot; with &quot;NA&quot; mutate_all(~(na_if(., &quot;unknown&quot;))) %&gt;% # convert numeric columns to type numeric mutate_at(vars(rotation_period, orbital_period, diameter, surface_water, population), ~(as.numeric(.))) %&gt;% # calculate values of interest mutate( # make surface water a proportion surface_water = surface_water / 100, # calculate population in millions population_mils = population / 1000000, # calculate a planet&#39;s distance from the sun (Kepler&#39;s 3rd law) au = (((orbital_period / 365) ^ 2) ^ (1/3)), # convert gravity to a number gravity = parse_number(as.character(gravity)), # calculate the force of gravity g = gravity * 9.8, # calculate radius radius = diameter / 2, # calculate planet mass (ish) mass = (g * (radius^2)) / grav_constant, # calculate planet area area = pi * (radius^2), # create column indicating whether the planet is in the solar system solar_system = rep(FALSE, n()), # create a new variable indicating whether a planet was in the original # trilogy orig_tril = case_when(name == &quot;Alderaan&quot; | name == &quot;Tatooine&quot; | name == &quot;Yavin&quot; | name == &quot;Yavin 4&quot; ~ &quot;new_hope&quot;, name == &quot;Bespin&quot; | name == &quot;Dagobah&quot; | name == &quot;Hoth&quot; ~ &quot;empire_strikes&quot;, name == &quot;Endor&quot; ~ &quot;return_jedi&quot;, TRUE ~ NA_character_)) # create dataset for planets in the solar system sol_sys &lt;- tibble( name = c(&quot;Mercury&quot;, &quot;Venus&quot;, &quot;Earth&quot;, &quot;Mars&quot;, &quot;Jupiter&quot;), orbital_period = c( 88, 225, 365, 687, 4330), au = c( .39, .72, 1, 1.52, 5.20), solar_system = c( TRUE, TRUE, TRUE, TRUE, TRUE), radius = c( 2439.5, 6052, 6378, 3396, 71492) ) #combine the star war&#39;s planets and solar system data into one dataset planets &lt;- bind_rows(planets, sol_sys) # look at first ten rows of tidied dataet head(planets, n = 10L) ## # A tibble: 10 x 17 ## name rotation_period orbital_period diameter climate gravity terrain ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Alde… 24 364 12500 temper… 1 grassl… ## 2 Yavi… 24 4818 10200 temper… 1 jungle… ## 3 Hoth 23 549 7200 frozen 1.1 tundra… ## 4 Dago… 23 341 8900 murky NA swamp,… ## 5 Besp… 12 5110 118000 temper… 1.5 gas gi… ## 6 Endor 18 402 4900 temper… 0.85 forest… ## 7 Naboo 26 312 12120 temper… 1 grassy… ## 8 Coru… 24 368 12240 temper… 1 citysc… ## 9 Kami… 27 463 19720 temper… 1 ocean ## 10 Geon… 30 256 11370 temper… 0.9 rock, … ## # … with 10 more variables: surface_water &lt;dbl&gt;, population &lt;dbl&gt;, ## # population_mils &lt;dbl&gt;, au &lt;dbl&gt;, g &lt;dbl&gt;, radius &lt;dbl&gt;, mass &lt;dbl&gt;, ## # area &lt;dbl&gt;, solar_system &lt;lgl&gt;, orig_tril &lt;chr&gt; 4.0.2 The Visualization # create function for calculating x axis locations during the time it takes # bespin to make one rotation. There has to be enough slices to obscure the # geom_points jumping back at the end of Bespin&#39;s year orbit_slice &lt;- function(planet = NULL) { # grab orbital period of planet of interest temp &lt;- planets$orbital_period[which(planets$name == planet)] # calculate 511 x-axis point for that planet throughout Bespin&#39; year rep(seq(from = 0, to = 5110, length.out = (5110 * (temp / 5110))), length.out = 5110) } # calculate locations on the x-axis for each planets during the time it takes # bespin to make one rotation. orbital_degrees &lt;- tibble( &quot;Alderaan&quot; = orbit_slice(&quot;Alderaan&quot;), &quot;Hoth&quot; = orbit_slice(&quot;Hoth&quot;), &quot;Dagobah&quot; = orbit_slice(&quot;Dagobah&quot;), &quot;Bespin&quot; = orbit_slice(&quot;Bespin&quot;), &quot;Endor&quot; = orbit_slice(&quot;Endor&quot;), &quot;Tatooine&quot; = orbit_slice(&quot;Tatooine&quot;), &quot;Mercury&quot; = orbit_slice(&quot;Mercury&quot;), &quot;Venus&quot; = orbit_slice(&quot;Venus&quot;), &quot;Earth&quot; = orbit_slice(&quot;Earth&quot;), &quot;Mars&quot; = orbit_slice(&quot;Mars&quot;), &quot;Jupiter&quot; = orbit_slice(&quot;Jupiter&quot;), &quot;days_count&quot; = 1:5110 ) # gather days into a column and the planet names into another column orbital_degrees %&lt;&gt;% gather(key = &quot;name&quot;, value = &quot;days&quot;, -days_count) # planets plot planets_plot &lt;- planets %&gt;% # select only variables of interest select(name, au, radius, orbital_period, orig_tril, solar_system) %&gt;% # drop planets that do not have (1) a name, (2) a distance from the sun (i.e. # an AU), (3) an AU less than 2, and (4) a radius greater than 0. filter(!is.na(name), !is.na(au), !is.na(orbital_period), !is.na(orig_tril) | solar_system == TRUE, # au &lt; 2, radius != 0.00) %&gt;% left_join(orbital_degrees, by = &quot;name&quot;) %&gt;% #drop mercury and alderaan filter(name != &quot;Mercury&quot;, # mercury for orbiting too quickly name != &quot;Alderaan&quot;) %&gt;% # alderaan for esssentially being earth 2.0 # plot the planets distance from the sun against their arbitrary degree ggplot(aes(x = days, y = au, color = solar_system)) + # add labels indicating y-axis units and add star and earth geom_text(aes(x = 0, y = 0, label = &quot;STAR&quot;), color = &quot;deeppink3&quot;, size = 5) + geom_text(aes(x = 5110 * 3 / 4, y = 2, label = &quot;2 AU&quot;), color = &quot;deeppink3&quot;, size = 5) + geom_text(aes(x = 5110 * 3 / 4, y = 4, label = &quot;4 AU&quot;), color = &quot;deeppink3&quot;, size = 5) + geom_text(aes(x = 5110 * 3 / 4, y = 6, label = &quot;6 AU&quot;), color = &quot;deeppink3&quot;, size = 5) + # add label for describing 1 AU annotate(geom = &quot;label&quot;, x = 5110 * 1 / 2, y = 7, label = &quot;1 AU = ~150,000,000 km&quot;, color = &quot;deeppink2&quot;, fill = &quot;black&quot;, size = 5) + # add planet points; map size of the point to planet radius geom_point(aes(size = radius), alpha = .6) + # add planet text; also suppress its legend geom_text(aes(label = name), position = position_nudge(y = 1.1), alpha = .7, size = 5, show.legend = FALSE) + # make the coordinate polar coord_polar(theta = &quot;x&quot;) + # add transition according to days transition_manual(days_count) + # set the limit of size values scale_size_continuous(range = c(.5, 10)) + # drop x-axis grid marks and breaks scale_x_continuous(breaks = NULL) + # set 2-axis limit scale_y_continuous(limits = c(0, 7)) + # set the colours scale_colour_manual(name = &quot;Star System&quot;, values = c(&quot;#02fff6&quot;, &quot;#ff7b00&quot;), labels = c(&quot;Solar System&quot;, &quot;Star Wars&quot;)) + # add labels labs(title = &quot;Distance from Host Star and Orbital Period&quot;, subtitle = &quot;Days: {current_frame}&quot;, caption = &quot;Data from https://swapi.co.&quot;) + # customize using my theme my_theme() + # drop axis text and axis titles and center title, subtitle, and caption theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5), plot.caption = element_text(hjust = 0.5), axis.text = element_blank(), axis.title = element_blank(), plot.margin = unit(c(1, 5, 1, 7), &quot;cm&quot;), legend.position = &quot;right&quot;) + # drop radius legend and change the size of the legend points guides(size = FALSE, colour = guide_legend(override.aes = list(size = 5, alpha = 1))) # animate plot with a duration of 55 and a fps of 58 animate(planets_plot, nframes = 2640, fps = 48) 4.0.2.1 Idea As interesting as I found the data in the first two plots, I think several plots could be devoted to the planets dataset. Specifically, the visualizations could be framed around the common theme of astronomy, serving as an instructive tool for teaching concepts from astronomy (e.g., Keppler’s third law, calculations of gravitational force). The present plot shows the relationship between a planet’s surface water and its distance from the sun. I would like to add a solar system dataset to the Starwar’s planets dataset and use facetwrap to provide a side by side comparison of fictional and non-fictional planets. 4.0.2.2 Intended Audience Fans of Star Wars or anyone who has an interest in astronomy or phyics. 4.0.2.3 Intended Message Planets farther from the sun seem to have more surface water, which seems to be consistent with our solar system. "]
]
